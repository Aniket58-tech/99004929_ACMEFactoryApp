//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ACMEFactoryDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ACMEFactoryContext : DbContext
    {
        public ACMEFactoryContext()
            : base("name=ACMEFactoryContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Machine> Machines { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
    
        public virtual ObjectResult<string> uspAddMachine(string machineName, Nullable<int> typeOfMachine, Nullable<System.DateTime> machineStartTime, Nullable<System.DateTime> machineEndTime)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            var typeOfMachineParameter = typeOfMachine.HasValue ?
                new ObjectParameter("typeOfMachine", typeOfMachine) :
                new ObjectParameter("typeOfMachine", typeof(int));
    
            var machineStartTimeParameter = machineStartTime.HasValue ?
                new ObjectParameter("machineStartTime", machineStartTime) :
                new ObjectParameter("machineStartTime", typeof(System.DateTime));
    
            var machineEndTimeParameter = machineEndTime.HasValue ?
                new ObjectParameter("machineEndTime", machineEndTime) :
                new ObjectParameter("machineEndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddMachine", machineNameParameter, typeOfMachineParameter, machineStartTimeParameter, machineEndTimeParameter);
        }
    
        public virtual ObjectResult<string> uspAddWorker(string workerName, Nullable<int> typeOfWorker, Nullable<System.DateTime> workerStartTime, Nullable<System.DateTime> workerEndTime)
        {
            var workerNameParameter = workerName != null ?
                new ObjectParameter("workerName", workerName) :
                new ObjectParameter("workerName", typeof(string));
    
            var typeOfWorkerParameter = typeOfWorker.HasValue ?
                new ObjectParameter("typeOfWorker", typeOfWorker) :
                new ObjectParameter("typeOfWorker", typeof(int));
    
            var workerStartTimeParameter = workerStartTime.HasValue ?
                new ObjectParameter("workerStartTime", workerStartTime) :
                new ObjectParameter("workerStartTime", typeof(System.DateTime));
    
            var workerEndTimeParameter = workerEndTime.HasValue ?
                new ObjectParameter("workerEndTime", workerEndTime) :
                new ObjectParameter("workerEndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddWorker", workerNameParameter, typeOfWorkerParameter, workerStartTimeParameter, workerEndTimeParameter);
        }
    
        public virtual ObjectResult<string> uspDeleteMachine(Nullable<int> machineId)
        {
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspDeleteMachine", machineIdParameter);
        }
    
        public virtual ObjectResult<string> uspDeleteWorker(Nullable<int> workerId)
        {
            var workerIdParameter = workerId.HasValue ?
                new ObjectParameter("workerId", workerId) :
                new ObjectParameter("workerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspDeleteWorker", workerIdParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateMachine(Nullable<int> machineId, string machineName)
        {
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(int));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateMachine", machineIdParameter, machineNameParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateWorker(Nullable<int> workerId, string workerName)
        {
            var workerIdParameter = workerId.HasValue ?
                new ObjectParameter("workerId", workerId) :
                new ObjectParameter("workerId", typeof(int));
    
            var workerNameParameter = workerName != null ?
                new ObjectParameter("workerName", workerName) :
                new ObjectParameter("workerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateWorker", workerIdParameter, workerNameParameter);
        }
    
        public virtual ObjectResult<string> uspWMMappingInput(Nullable<int> workerId, Nullable<int> machineId)
        {
            var workerIdParameter = workerId.HasValue ?
                new ObjectParameter("workerId", workerId) :
                new ObjectParameter("workerId", typeof(int));
    
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspWMMappingInput", workerIdParameter, machineIdParameter);
        }
    }
}
